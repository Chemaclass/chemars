<?php

namespace Chema\ArsBundle\Entity;

use Doctrine\DBAL\Query\QueryBuilder;
use Assetic\Exception\Exception;

/**
 * VoucherRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VoucherRepository extends \Doctrine\ORM\EntityRepository
{
	/**
	 * findAllOrderedDateFound
	 */
	public function findAllOrderedDateFound()
	{
		return $this->getEntityManager()
			->createQuery(
					'SELECT v FROM ChemaArsBundle:Voucher v ORDER BY v.dateFound DESC'
			)
			->getResult();
	}

	/**
	 * getTotal
	 */
	public function getTotal()
	{
		return $this->getEntityManager()
			->createQuery(
					'SELECT count(v.id) FROM ChemaArsBundle:Voucher v'
			)
			->getSingleScalarResult();
	}

	/**
	 * Check if exists the voucher.
	 *
	 * If exists return the existing one,
	 * if not exists return the same as we pass as param.
	 *
	 * @param Voucher $voucher Voucher to check if exists or not.
	 * @return Voucher object result.
	 */
	public function getVoucherIfexists($voucher)
	{
		$em = $this->getEntityManager();
		$queryVoucher = $em->createQuery('
			SELECT v
			FROM ChemaArsBundle:Voucher v
			WHERE v.code = :code
			AND v.shop = :shop
			AND v.value = :value')
			->setParameter('code', $voucher->getCode())
			->setParameter('shop', $voucher->getShop())
			->setParameter('value', $voucher->getValue());
		try{
			return $queryVoucher->getSingleResult();
		}catch(\Exception $e ){
			return $voucher;
		}
	}
}
